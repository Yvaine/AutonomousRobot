// Auther: Jiaao Guan
import lejos.hardware.Sound;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.motor.EV3MediumRegulatedMotor;

public class BlockCatcher extends Thread{
	private EV3LargeRegulatedMotor catcherArm;
	private EV3MediumRegulatedMotor catcherHand;
	private boolean toRelease;		//true if a signal is received to ask the catcher to release the block
	private boolean done;			//true if the current task of catcher is done
	private int catchSpeed = 20;	//the rotation speed of catcher motors
	private int handOpenAngle = -100;
	private int handCloseAngle = 150;
	private int armUpAngle = 180;
	private int armDownAngle = -180;
	
	public BlockCatcher(EV3LargeRegulatedMotor catcherArm, EV3MediumRegulatedMotor catcherHand)
	{
		this.catcherArm = catcherArm;
		this.catcherHand = catcherHand;
		this.toRelease = false;
		this.done = false;
	}
	
	//it is a one time process
	public void run()
	{
		this.catcherArm.setSpeed(catchSpeed);
		this.catcherHand.setSpeed(catchSpeed);
		this.catcherArm.rotate(armDownAngle,true);
		this.catcherHand.rotate(handOpenAngle,false);
		try
		{
			Thread.sleep(800);
		}
		catch(Exception e){}
		
		this.catcherHand.rotate(handCloseAngle,false);
		this.catcherArm.rotate(armUpAngle,false);
		this.done = true;
		Sound.beep();
		
		while(!toRelease);
		
		this.done = false;
		this.catcherArm.rotate(armDownAngle,false);
		this.catcherHand.rotate(handOpenAngle,false);
		this.done = true;
	}
	
	//ask the catcher to release the block
	public void Release()
	{
		this.toRelease = true;
	}
	
	// Returns true if the current move is done.
	/*	Since there is a delay in the second brick,
	 * this method is to make sure the current catching or releasing process is done
	 * in order to jump to the next step.
	 * I am not sure about how the delay will occur, and this method may be replaced by
	 * a simple sleep.
	 */
	public boolean currentMoveDone()
	{
		return this.done;
	}
}
