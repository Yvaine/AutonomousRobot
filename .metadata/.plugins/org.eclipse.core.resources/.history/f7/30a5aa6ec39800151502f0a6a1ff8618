import lejos.hardware.Sound;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.SensorMode;

public class ObjectDetector{

	private EV3LargeRegulatedMotor leftMotor;
	private Odometer odometer;
	private Navigation navi;
	private UltrasonicPoller usPoller;
	private LightSensorPoller lsPoller;
	private int[] enemyBase = new int[4]; //the 4 numbers indicating the bottom left and top right of enemy base region
	private int[] enemyBaseSide = new int[4];
	private int currentSide = 2;	//0,1,2,3 indicates east,north,west,south
	private final int sensorOffset = 16;
	private final int searchSpeed = 70;
	private final int searchSpeedLow = 40;
	private final int searchDepth = 30;
	private final double tachoDepth;
	private int currentColor = -1;
	private int color = -1;	//1=light blue, 2=red, 3=yellow, 4=white, 5=dark blue, -1=unknown
	private boolean isFlag = false;
	private final int blockID;//need to be preset
	
	/**
	 * Contructs an ObjectDetector object
	 * */
	public ObjectDetector(Odometer odometer, Navigation navi, LightSensorPoller lsPoller, UltrasonicPoller usPoller, int blockID, int[] enemyBase) {
		this.odometer = odometer;
		this.navi = navi;
		this.lsPoller = lsPoller;
		this.usPoller = usPoller;
		this.blockID = blockID;
		this.enemyBase = enemyBase;
		this.enemyBaseSide[0] = this.enemyBase[0] - 15;
		this.enemyBaseSide[1] = this.enemyBase[1] - 15;
		this.enemyBaseSide[2] = this.enemyBase[2] + 15;
		this.enemyBaseSide[3] = this.enemyBase[3] + 15;
		this.leftMotor = this.odometer.getLeftMotor();
		this.tachoDepth = searchDepth*360/(2*Math.PI*odometer.getRadius());
	}

	public void doObjectSearching()
	{	
		navi.travelToLocalization(enemyBaseSide[0], enemyBaseSide[1]);
		ObstacleAvoider.usMotor.rotate(-100);
		//move around the base region, for every 10cm movement, 
		//search inside the region and see if there is any block in sight
		//Always search clockwise
		currentSide = 2;
		navi.turnTo((currentSide-1)*90,true);
		WestSearch:
		while(true){
			navi.setSpeeds(searchSpeed, searchSpeed);
			while(usPoller.getFilteredData() > searchDepth)
			{
				if(odometer.getY() > enemyBaseSide[3])
					break WestSearch;
			}
			navi.stopMotors();
			navi.goForward(sideOffset());
			searchInside();
			if(isFlag)	//if flag found, return out of seaching and do the object catching
			{
				ObstacleAvoider.usMotor.rotate(100);
				return;
			}
			navi.turnTo((currentSide-1)*90,true);
			navi.goForward(5);
		}
		navi.stopMotors();
		
		currentSide = 1;
		navi.turnTo((currentSide-1)*90,true);
		NorthSearch:
		while(true){
			navi.goForward(sensorOffset/2);
			navi.setSpeeds(searchSpeed, searchSpeed);
			while(usPoller.getFilteredData() > searchDepth)
			{
				if(odometer.getX() > enemyBaseSide[2])
					break NorthSearch;
			}
			navi.stopMotors();
			navi.goForward(sideOffset());
			searchInside();
			if(isFlag)	//if flag found, return out of seaching and do the object catching
			{
				ObstacleAvoider.usMotor.rotate(100);
				return;
			}
			navi.turnTo((currentSide-1)*90,true);
			navi.goForward(5);
		}
		navi.stopMotors();
		
		currentSide = 0;
		navi.turnTo((currentSide-1)*90,true);
		EastSearch:
		while(true){
			navi.goForward(sensorOffset/2);
			navi.setSpeeds(searchSpeed, searchSpeed);
			while(usPoller.getFilteredData() > searchDepth)
			{
				if(odometer.getY() < enemyBaseSide[1])
					break EastSearch;
			}
			navi.stopMotors();
			navi.goForward(sideOffset());
			searchInside();
			if(isFlag)	//if flag found, return out of seaching and do the object catching
			{
				ObstacleAvoider.usMotor.rotate(100);
				return;
			}
			navi.turnTo((currentSide-1)*90,true);
			navi.goForward(5);
		}
		navi.stopMotors();
		
		currentSide = 3;
		navi.turnTo((currentSide-1)*90,true);
		SouthSearch:
		while(true){
			navi.goForward(sensorOffset/2);
			navi.setSpeeds(searchSpeed, searchSpeed);
			while(usPoller.getFilteredData() > searchDepth)
			{
				if(odometer.getX() < enemyBaseSide[0])
					break SouthSearch;
			}
			navi.stopMotors();
			navi.goForward(sideOffset());
			searchInside();
			if(isFlag)	//if flag found, return out of seaching and do the object catching
			{
				ObstacleAvoider.usMotor.rotate(100);
				return;
			}
			navi.turnTo((currentSide-1)*90,true);
			navi.goForward(5);
		}
		navi.stopMotors();
		
		//if code runs to here, 
		// it means the searching failed.
		// We might code the robot to search again
	}
	
	private void searchInside()
	{
		double startTacho = 0;
		Sound.beep();
		currentColor = -1;	//reset color detection
		color = -1;
		navi.turnTo(180 + currentSide*90, true);
		startTacho = leftMotor.getTachoCount();

		navi.setSpeeds(searchSpeedLow, searchSpeedLow);
		//TODO: here we need some way to identify the block
		//	since our us sensor cannot give useful value below 5cm or so,
		//	we need to rely on light sensor
		//		it is better to test how the color ID changes from far to close for each colored block
		while( (!blockIdentified()) && ((leftMotor.getTachoCount()-startTacho) < tachoDepth) );
		navi.stopMotors();
		if (color == 4 && Math.abs(lsPoller.getFColorRGB()[0]*100 - lsPoller.getFColorRGB()[2]*100) < 1){
			color = 1;
		}
		isFlag();
		if(isFlag)	//the block is identified to be the flag
		{
			//return all the way out to main and run the block catcher
			Sound.beepSequence();
			return;
		}
		else	//the block is not the flag
		{
			navi.rotateForward(startTacho-leftMotor.getTachoCount());//goes back to side
		}
		
	}
	
	
	private double sideOffset()
	{
		double offset = sensorOffset*usPoller.getFilteredData()/30;
		if(offset > sensorOffset)
			offset = sensorOffset;
		return offset;
	}

	/**
	 * isBlock() will check if the object detected is an obtsacle or the intended block
	 * @return true if the object is a block
	 * @return false if the object is an obstacle
	 * */
	private boolean blockIdentified() {
		if(currentColor == 6)
		{
			if(lsPoller.getFColorID() == 7)
			{
				color = 4;
				return true;
			}
		}
		switch(lsPoller.getFColorID())
		{
			//red
			case 0:
				color = 2;
				return true;
			//d.blue
			case 2:
				color = 5;
				return true;
			//yellow
			case 3:
				color = 3;
				return true;
		}
		if(lsPoller.getFColorID() == 6)
			currentColor = 6;
		return false;
	}
	
	private void isFlag()
	{
		isFlag = (color == blockID);
	}

}
