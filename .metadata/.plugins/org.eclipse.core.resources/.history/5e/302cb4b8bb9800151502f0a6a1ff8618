/*
 * File: Navigation.java
 * Written by: Sean Lawlor
 * ECSE 211 - Design Principles and Methods, Head TA
 * Fall 2011
 * Ported to EV3 by: Francois Ouellet Delorme
 * Fall 2015
 * 
 * Movement control class (turnTo, travelTo, flt, localize)
 */
import lejos.hardware.Sound;
import lejos.hardware.motor.EV3LargeRegulatedMotor;

public class Navigation {
	private OdometryCorrection odomCorrection;
	final static int FAST = 300, SLOW = 200, ACCELERATION = 6000;
	final static double DEG_ERR = 1.0, CM_ERR = 1.0;
	private Odometer odometer;
	private EV3LargeRegulatedMotor leftMotor, rightMotor;
	private Display display = new Display();
	int switchFlag = 0;

	public Navigation(Odometer odo, OdometryCorrection odomCorrection) {
		this.odometer = odo;
		this.odomCorrection = odomCorrection;
		EV3LargeRegulatedMotor[] motors = this.odometer.getMotors();
		this.leftMotor = motors[0];
		this.rightMotor = motors[1];

		// set acceleration
		this.leftMotor.setAcceleration(ACCELERATION);
		this.rightMotor.setAcceleration(ACCELERATION);
	}
	
	// rotate both motors by a set degree
	public void rotateForward(double degree) 
	{
		leftMotor.setSpeed(FAST);
		rightMotor.setSpeed(FAST);
		leftMotor.rotate((int) degree, true);
		rightMotor.rotate((int) degree, false);
	}
	/*
	 * Functions to set the motor speeds jointly
	 */
	public void setSpeeds(float lSpd, float rSpd) {
		this.leftMotor.setSpeed(lSpd);
		this.rightMotor.setSpeed(rSpd);
		if (lSpd < 0)
			this.leftMotor.backward();
		else
			this.leftMotor.forward();
		if (rSpd < 0)
			this.rightMotor.backward();
		else
			this.rightMotor.forward();
	}

	public void setSpeeds(int lSpd, int rSpd) {
		this.leftMotor.setSpeed(lSpd);
		this.rightMotor.setSpeed(rSpd);
		if (lSpd < 0)
			this.leftMotor.backward();
		else
			this.leftMotor.forward();
		if (rSpd < 0)
			this.rightMotor.backward();
		else
			this.rightMotor.forward();
	}

	public void stopMotors() {
		this.setSpeeds(0, 0);
	}

	/*
	 * Float the two motors jointly
	 */
	public void setFloat() {
		this.leftMotor.stop();
		this.rightMotor.stop();
		this.leftMotor.flt(true);
		this.rightMotor.flt(true);
	}

	/*
	 * TravelTo function which takes as arguments the x and y position in cm
	 * Will travel to designated position, while constantly updating it's
	 * heading
	 */

	public void travelTo(double x, double y) {

		double minAng = 0.0;

		minAng = angleToPoint(x, y);

		display.print("MinAng: ", "" + minAng, 7);

		// minAng = (Math.atan2(y - odometer.getY(), x - odometer.getX())) *
		// (180.0 / Math.PI);
		this.turnTo(minAng, true);
		Sound.beepSequence();
		this.leftMotor.setSpeed(SLOW);
		this.rightMotor.setSpeed(SLOW);
		// double distance = Math.sqrt(Math.pow(odometer.getX() - x,2) +
		// Math.pow(odometer.getY() - y, 2));

		this.leftMotor.forward();
		this.rightMotor.forward();

		double value = Math.sqrt(Math.pow(x - odometer.getX(), 2.0) + Math.pow(y - odometer.getY(), 2.0));
		Display display = new Display();
		display.print("Dist Trav: ", display + "", 6);

		while (Math.sqrt(Math.pow(x - odometer.getX(), 2.0) + Math.pow(y - odometer.getY(), 2.0)) > 2) {
			value = Math.sqrt(Math.pow(x - odometer.getX(), 2.0) + Math.pow(y - odometer.getY(), 2.0));
			display.print("Dist Trav: ", value + "", 6);

			odomCorrection.doCorrection();

			// logic of correction

			this.leftMotor.forward();
			this.rightMotor.forward();

		}

		// this.leftMotor.rotate(convertDistance(2.1, distance), true);
		// this.rightMotor.rotate(convertDistance(2.1, distance), false);
		this.leftMotor.stop(true);
		this.rightMotor.stop(true);
		// this.setSpeeds(0, 0);
	}

	public void travelToLocalization(double x, double y) {
		double minAng = 0.0;

		minAng = angleToPoint(x, y);

		display.print("MinAng: ", "" + minAng, 7);

		// minAng = (Math.atan2(y - odometer.getY(), x - odometer.getX())) *
		// (180.0 / Math.PI);
		this.turnTo(minAng, true);
		Sound.beepSequence();
		this.leftMotor.setSpeed(SLOW);
		this.rightMotor.setSpeed(SLOW);
		// double distance = Math.sqrt(Math.pow(odometer.getX() - x,2) +
		// Math.pow(odometer.getY() - y, 2));

		this.leftMotor.forward();
		this.rightMotor.forward();

		double value = Math.sqrt(Math.pow(x - odometer.getX(), 2.0) + Math.pow(y - odometer.getY(), 2.0));
		Display display = new Display();
		display.print("Dist Trav: ", display + "", 6);

		while (Math.sqrt(Math.pow(x - odometer.getX(), 2.0) + Math.pow(y - odometer.getY(), 2.0)) > 2) {
			value = Math.sqrt(Math.pow(x - odometer.getX(), 2.0) + Math.pow(y - odometer.getY(), 2.0));
			//display.print("Dist Trav: ", value + "", 6);

			this.leftMotor.forward();
			this.rightMotor.forward();

		}

		// this.leftMotor.rotate(convertDistance(2.1, distance), true);
		// this.rightMotor.rotate(convertDistance(2.1, distance), false);
		this.leftMotor.stop(true);
		this.rightMotor.stop(true);
		// this.setSpeeds(0, 0);
	}

	public void turnToLocalization(double angle, boolean stop) {

		double error = angle - this.odometer.getAng();

		while (Math.abs(error) > DEG_ERR) {

			error = angle - this.odometer.getAng();

			if (error < -180.0) {
				this.setSpeeds(-SLOW, SLOW);
			} else if (error < 0.0) {
				this.setSpeeds(SLOW, -SLOW);
			} else if (error > 180.0) {
				this.setSpeeds(SLOW, -SLOW);
			} else {
				this.setSpeeds(-SLOW, SLOW);
			}
		}

		if (stop) {
			this.setSpeeds(0, 0);
		}
	}

	/*
	 * TurnTo function which takes an angle and boolean as arguments The boolean
	 * controls whether or not to stop the motors when the turn is completed
	 */
	public void turnTo(double angle, boolean stop) {
		// double error = angle - this.odometer.getAng();

		// error = (error + 360)%360;

		// display.print("Error Angle: ", error + "", 7);
		leftMotor.setSpeed(FAST);
		rightMotor.setSpeed(FAST);

		double angleToTurn = Odometer.minimumAngleFromTo(this.odometer.getAng(), angle);

		leftMotor.rotate(-convertAngle(2.1, 14.6, angleToTurn), true);
		rightMotor.rotate(convertAngle(2.1, 14.6, angleToTurn), false);

	}

	private static int convertAngle(double radius, double width, double angle) {
		return convertDistance(radius, Math.PI * width * angle / 360.0);
	}
	
	// Turn specific degrees counter clock wise, negative for clock wise
	public void turn(double angle)
	{
		leftMotor.setSpeed(FAST);
		rightMotor.setSpeed(FAST);
		
		leftMotor.rotate(-convertAngle(2.1, 14.6, angle), true);
		rightMotor.rotate(convertAngle(2.1, 14.6, angle), false);
	}

	/*
	 * Go foward a set distance in cm
	 */
	public void goForward(double distance) {
		leftMotor.setSpeed(FAST);
		rightMotor.setSpeed(FAST);
		leftMotor.rotate(convertDistance(odometer.getRadius(), distance), true);
		rightMotor.rotate(convertDistance(odometer.getRadius(), distance), false);
	}

	// convert distance to the necessary amount of angle each wheel needs to
	// rotate
	private static int convertDistance(double radius, double distance) {
		return (int) ((distance * 180.0) / (Math.PI * radius));
	}
	
	//calculate the relative angle from the robot to a given point
	public double angleToPoint(double x, double y)
	{
		double minAng = (Math.atan2(y - odometer.getY(), x - odometer.getX())) * (180.0 / Math.PI);
		if (minAng < 0) {
			minAng += 360.0;
		}
		return minAng;
	}
}