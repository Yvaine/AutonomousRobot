import lejos.hardware.Sound;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.SensorMode;

public class ObjectDetector{

	private EV3LargeRegulatedMotor leftMotor;
	private Odometer odometer;
	private Navigation navi;
	private UltrasonicPoller usPoller;
	private LightSensorPoller lspoller;
	private boolean isDetectedStyrofoam = false;
	private int blockID = 0;
	private int[] enemyBase = new int[4]; //the 4 numbers indicating the bottom left and top right of enemy base region
	private int[] enemyBaseSide = new int[4];
	private int currentSide = 2;	//0,1,2,3 indicates east,north,west,south
	private int searchSpeed = 50;
	private boolean isFlag = false;
	
	/**
	 * Contructs an ObjectDetector object
	 * */
	public ObjectDetector(Odometer odometer, Navigation navi, LightSensorPoller lspoller, UltrasonicPoller usPoller, int blockID, int[] enemyBase) {
		this.odometer = odometer;
		this.navi = navi;
		this.lspoller = lspoller;
		this.usPoller = usPoller;
		this.blockID = blockID;
		this.enemyBase = enemyBase;
		this.enemyBaseSide[0] = this.enemyBase[0] - 15;
		this.enemyBaseSide[1] = this.enemyBase[1] - 15;
		this.enemyBaseSide[2] = this.enemyBase[2] + 15;
		this.enemyBaseSide[3] = this.enemyBase[3] + 15;
		this.leftMotor = this.odometer.getLeftMotor();
	}

	public void doObjectSearching()
	{	
		navi.travelToLocalization(enemyBaseSide[0], enemyBaseSide[1]);
		ObstacleAvoider.usMotor.rotate(-90);
		//move around the base region, for every 10cm movement, 
		//search inside the region and see if there is any block in sight
		//Always search clockwise
		currentSide = 2;
		navi.turnTo((currentSide-1)*90);
		WestSearch:
		while(true){
			navi.setSpeeds(searchSpeed, searchSpeed);
			while(usPoller.getFilteredData() > 20)
			{
				if(odometer.getY() > enemyBaseSide[3])
					break WestSearch;
			}
			navi.goForward(10);
			searchInside();
			if(isFlag)	//if flag found, return out of seaching and do the object catching
			{
				ObstacleAvoider.usMotor.rotate(90);
				return;
			}
		}
		
		currentSide = 1;
		navi.turnTo((currentSide-1)*90);
		NorthSearch:
		while(true){
			navi.setSpeeds(searchSpeed, searchSpeed);
			while(usPoller.getFilteredData() > 20)
			{
				if(odometer.getX() > enemyBaseSide[2])
					break NorthSearch;
			}
			navi.goForward(10);
			searchInside();
			if(isFlag)	//if flag found, return out of seaching and do the object catching
			{
				ObstacleAvoider.usMotor.rotate(90);
				return;
			}
		}
		
		currentSide = 0;
		navi.turnTo((currentSide-1)*90);
		EastSearch:
		while(true){
			navi.setSpeeds(searchSpeed, searchSpeed);
			while(usPoller.getFilteredData() > 20)
			{
				if(odometer.getY() < enemyBaseSide[1])
					break EastSearch;
			}
			navi.goForward(10);
			searchInside();
			if(isFlag)	//if flag found, return out of seaching and do the object catching
			{
				ObstacleAvoider.usMotor.rotate(90);
				return;
			}
		}
		
		currentSide = 3;
		navi.turnTo((currentSide-1)*90);
		SouthSearch:
		while(true){
			navi.setSpeeds(searchSpeed, searchSpeed);
			while(usPoller.getFilteredData() > 20)
			{
				if(odometer.getX() < enemyBaseSide[0])
					break SouthSearch;
			}
			navi.goForward(10);
			searchInside();
			if(isFlag)	//if flag found, return out of seaching and do the object catching
			{
				ObstacleAvoider.usMotor.rotate(90);
				return;
			}
		}
		
		//if code runs to here, 
		// it means the searching failed.
		// We might code the robot to search again
	}
	
	private void searchInside()
	{
		navi.turnTo(180 + currentSide*90, true);
		leftMotor.resetTachoCount();

		navi.setSpeeds(searchSpeed, searchSpeed);
		//TODO: here we need some way to identify the block
		//	since our us sensor cannot give useful value below 5cm or so,
		//	we need to rely on light sensor
		//		it is better to test how the color ID changes from far to close for each colored block
		while(/*obstacle not identified OR max searching depth not reached*/);
		navi.stopMotors();
		if(/* the block is the flag */isFlag)
		{
			//return all the way out to main and run the block catcher
			return;
		}
		else	//the block is not the flag
		{
			navi.rotateForward(-leftMotor.getTachoCount);//goes back to side
		}
		
	}
	
	private void catchBlock() {
		// AutonomousRobot.blockCatcherMotor.setSpeed(20);
		// AutonomousRobot.blockCatcherMotor.rotate(250);
		AutonomousRobot.rightMotor.setSpeed(100);
		AutonomousRobot.leftMotor.setSpeed(100);
		try {
			Thread.sleep(3000);
		} catch (Exception e) {

		}
		try {
			Thread.sleep(3000);
		} catch (Exception e) {

		}
	}

	/**
	 * isBock() will check if the object detected is an obtsacle or the intended block
	 * @reurn true if the object is a block
	 * @return false if the object is an obstacle
	 * */
	public boolean isBlock() {
		int falsePositiveIterator = 0;

		for (int i = 0; i < 20; i++) {
			
			//if looking for light blue or white blocks
			//the light blue blocks show up as white in color ID mode
			if ((blockID == 1 || blockID == 4) && lspoller.getFColorID() == 6) {
				//if light blue block, use RGB feature
				if (blockID == 1){
					if (lspoller.getFColorRGB()[0] < 0.2){
						continue;
					}
				}
				//otherwise, actual white block
				continue;
			}
			//if red block
			if (blockID == 2 && lspoller.getFColorID() == 0) continue;
			//if yellow block
			if (blockID == 3 && lspoller.getFColorID() == 3) continue;
			//if dark blue block
			if (blockID == 5 && lspoller.getFColorID() == 2) continue;
			
			falsePositiveIterator++;
		}
		
	}

}
