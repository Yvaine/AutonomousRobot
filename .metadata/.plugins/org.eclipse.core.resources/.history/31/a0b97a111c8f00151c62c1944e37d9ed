import lejos.utility.Timer;
import lejos.utility.TimerListener;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.SensorMode;

/**
 * @author Sean Lawlor
 * @author Ralph Bou Samra(Java Docs + helper methods)
 * @version 1.0 Nov 1, 2015
 * */

public class Odometer implements TimerListener {
	/**Timer object*/
	private Timer timer;
	/**Left motor*/
	private EV3LargeRegulatedMotor leftMotor;
	/**Right motor*/
	private EV3LargeRegulatedMotor rightMotor;
	/**Default timeout period*/
	private final int DEFAULT_TIMEOUT_PERIOD = 20;
	/**Left wheel Radius*/
	private double leftRadius;
	/**Right wheel radius*/
	private double rightRadius;
	/**Wheel width*/
	private double width;
	/**X position of the robot*/
	private double x;
	/**Y position of the robot*/
	private double y;
	/**Heading of the robot*/
	private double theta;
	private double[] oldDH;
	private double[] dDH;
	/**Light sensor*/
	private EV3ColorSensor lightSensor;
	// private final static Port lightPort =  SensorPort.S1;
	private Display display = new Display();
	
	// constructor
	/**Constructs an odometer object */
	public Odometer (EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor, int INTERVAL, boolean autostart) {
		
		// this.lightSensor = new EV3ColorSensor(lightPort);
		
		this.leftMotor = leftMotor;
		this.rightMotor = rightMotor;
		
		// default values, modify for your robot
		this.rightRadius = 2.05;//2.1
		this.leftRadius = 2.05;//2.1
		this.width = 14.2;//15.8
		
		this.x = 0;
		this.y = 0;
		this.theta = 0.0;
		this.oldDH = new double[2];
		this.dDH = new double[2];

		if (autostart) {
			// if the timeout interval is given as <= 0, default to 20ms timeout 
			this.timer = new Timer((INTERVAL <= 0) ? INTERVAL : DEFAULT_TIMEOUT_PERIOD, this);
			this.timer.start();
		} else
			this.timer = null;
	}
	
	// functions to start/stop the timerlistener
	/**
	 * Stops the timer
	 * */
	public void stop() {
		if (this.timer != null)
			this.timer.stop();
	}
	/**
	 * Starts the timer
	 * */
	public void start() {
		if (this.timer != null)
			this.timer.start();
	}
	
	/**
	 * Setup light sensor
	 * @return lightIntensity collected by the light sensor
	 * */
	float setupLightSensor(){
		SensorMode mode = lightSensor.getRedMode() ;
		float[] sample = new float[mode.sampleSize()] ;
		mode.fetchSample(sample, 0);
		float lightIntensity = sample[0]*100; 
		
		return lightIntensity;
	}
	
	
	/*
	 * Calculates displacement and heading as title suggests
	 */
	/**
	 * Gets the current displacement and heading of the robot
	 * @param data
	 *
	 * */
	private void getDisplacementAndHeading(double[] data) {
		int leftTacho, rightTacho;
		leftTacho = leftMotor.getTachoCount();
		rightTacho = rightMotor.getTachoCount();

		data[0] = (leftTacho * leftRadius + rightTacho * rightRadius) * Math.PI / 360.0;
		data[1] = (rightTacho * rightRadius - leftTacho * leftRadius) / width;
	}
	
	/*
	 * Recompute the odometer values using the displacement and heading changes
	 */
	/**
	 * Recompute the odometer values using the displacement and heading changes
	 * */
	public void timedOut() {
		this.getDisplacementAndHeading(dDH);
		dDH[0] -= oldDH[0];
		dDH[1] -= oldDH[1];

		// update the position in a critical region
		synchronized (this) {
			theta += dDH[1];
			theta = fixDegAngle(theta);

			x += dDH[0] * Math.cos(Math.toRadians(theta));
			y += dDH[0] * Math.sin(Math.toRadians(theta));
		}

		oldDH[0] += dDH[0];
		oldDH[1] += dDH[1];
		
		//Display the current x,y,theta values
		display.print("x",""+this.x, 0);
		display.print("y",""+this.y, 1);
		display.print("theta",""+this.theta, 2);
	}
	
	
	// return X value
	/**
	 * Get x position of the robot
	 * @return x
	 * */
	public double getX() {
		synchronized (this) {
			return x;
		}
	}
	
	// return Y value
	/**
	 * Get y position of the robot
	 * @return y
	 * */
	public double getY() {
		synchronized (this) {
			return y;
		}
	}
	
	/**
	 * Set x position of the robot
	 * @param new x value
	 * */
	public void setX(double newX){
		x = newX;
	}
	
	/**
	 * Set y position of the robot
	 * @param new y value
	 * */
	public void setY(double newY){
		y = newY;
	}


	// return theta value
	/**
	 * Gets heading of the robot
	 * @return theta
	 * */
	public double getAng() {
		synchronized (this) {
			return theta;
		}
	}

	// set x,y,theta
	/**
	 * Sets positions if corresponding update is true
	 * @param position arary containing x, y, and theta
	 * @param update array of size 3 containing boolean flags indicating updates in x, y, and theta respectively
	 * */
	public void setPosition(double[] position, boolean[] update) {
		synchronized (this) {
			if (update[0])
				x = position[0];
			if (update[1])
				y = position[1];
			if (update[2])
				theta = position[2];
		}
	}

	// return x,y,theta
	/**
	 * Return position of x, y, and theta
	 * */
	public void getPosition(double[] position) {
		synchronized (this) {
			position[0] = x;
			position[1] = y;
			position[2] = theta;
		}
	}
	
	/**
	 * Corrects theta; called by USLocalizer class
	 * @param angle
	 * */
	public void fixTheta(double angle){
		this.theta += angle;
		this.theta %= 360;
	}

	/**
	 * Return the x, y, and theta values
	 * @return double array containing x,y, and theta
	 * */
	public double[] getPosition() {
		synchronized (this) {
			return new double[] { x, y, theta };
		}
	}
	
	// accessors to motors
	/**
	 * Instantiates the motors
	 * @return array of size 2 containing the left and right motors
	 * */
	public EV3LargeRegulatedMotor[] getMotors() {
		return new EV3LargeRegulatedMotor[] {this.leftMotor, this.rightMotor};
	}
	
	/**
	 * Gets the left motor
	 * @return leftMotor
	 * */
	public EV3LargeRegulatedMotor getLeftMotor() {
		return this.leftMotor;
	}
	
	/**
	 * Gets the right motor
	 * @return rightMotor
	 * */
	public EV3LargeRegulatedMotor getRightMotor() {
		return this.rightMotor;
	}

	/**
	 * Fixes the angle by specified parameter
	 * @param angle
	 * @return fixedAngle
	 * */
	// static 'helper' methods
	public static double fixDegAngle(double angle) {
		if (angle < 0.0)
			angle = 360.0 + (angle % 360.0);

		return angle % 360.0;
	}
	
	//get radius or width
	
	public double getRadius()
	{
		return this.leftRadius;
	}

	/**
	 * Returns angle based on specified range
	 * @param a
	 * @param b
	 * @return fixedAngle
	 * */
	public static double minimumAngleFromTo(double a, double b) {
		double d = fixDegAngle(b - a);

		if (d < 180.0)
			return d;
		else
			return d - 360.0;
	}
}
